date(17.10.12)
--- Презентует старую-старую книжку.
--- Решение задачи с компиляторами
"""
    int a = 2 //* ... */2
    ;
"""

*** Про что хочу рассказать? Про то, что забыл...
    Перегрузка, шаблонные классы...

    """
    #include<iostream>

    // Попробуем реализовать подобие класса вектор
    template <typename T>
    class Array {
    private:
        // Такую константу
        // Нужно проинициализировать в конструкторе
        const size_t size;

        // Вот так делать не спортивно
        // std::vector<T>
        T * data; // Указатель на динамическую память
    public:
        Array(size_t sz)
            : size(sz), // константу можно проинициализировать
            // так и только так
            data(new T[size]) {
        }

        ~Array() {
            delete [] data;
        }
    private:
        Array & operator = (const Array & rhs);
    };

    int main() {

    }
    """

    Когда мы пишем 'data = new T[size]' мы можем попасть на исключение...
    не хватило памяти, сам класс T кинул исключение... Это нормально
    конструктор может закончится неудачей. Описанная конструкция монолитная
    Если хотя бы один из создаваемых объектов кинул исключение, то весь
    массив создастся.

    Поля в конструкторе инициализируются в порядке объявления в классе.
    Если мы будем делать это неправильно, то код будет потенциально опасен.

    Компилятор генерирует несколько функций автоматически за нас...
    Например operator=, в случае с константой он будет ругаться на то,
    что не может скопировать константу.

    Компилятор бы "написал" примерно следующее
    """
        Array & operator = (const Array & rhs) {
            size = rhs.size; // Oops1 копируем константу
            data = rhs.data; // Oops2 копируем указатель
        }
    """
    Если мы воспользуемся подобным оператором = то, непонятно
    кому будет принадлежать указатель на данные.

    Тут нужен либо оператор = который использует глубокое копирование,
    либо можно совсем запретить оператор = поместив его в
    private.

    В новом стандарте C++11 можно явно указать, что мы не хотим создавать
    дефолтный operator=.


    Поговорим теперь о конструкторе копирования.
    Тут компилятор тоже заботливо будет генерировать конструктор
    копирования по умолчанию.
    Написал бы он его примерно вот так:
    """
        Array(const Array & other)
        : size(other.size)
        , data(other.data) { // Oops Создали указатель на чужие данные
        }
    """

    Опять беда с тем кому принадлежат данные лежащие по указателю...
    Допустим удаляется сначала other вместе с ним данные по указателю,
    а потом созданный объект -- тут мы попадем в просак, потому что
    будем пробовать освободить уже освобожденный участок памяти...
    Беда...

    Опять нужно либо запретить использовать конструктор копирования,
    либо написать свой с глубоким копированием data. Продемонстрируем
    глубокое копирование:
    """
    Array(const Array & oter)
    : size(other.size) {
        data = new T[size];
        for (size_t i = 0; i != size; ++i) {
            data[i] = other.data[i];
        }
    }
    """
    Подобный код требует, чтобы у типа T существовал оператор =,
    а также, чтобы существовал дефолтный конструктор T().

    Если код не будет кидать исключений, то все будет работать корректно.
    Но возникнуть исключение может при создании T, при выделение памяти,
    а также, что самое страшное, при работе оператора =, для типа T.

    Напишем более безопасную версию.
    """
    Array(const Array & oter)
    : size(other.size) {
        data = new T[size];
        for (size_t i = 0; i != size; ++i) {
            try {
                data[i] = other.data[i];
            } catch(...) { // Ловим вообще все исключения.
                delete [] data;
                // Стоит также прокинуть исключение дальше.
                throw; // Прокинет то исключение, которое
                // Было поймано с помощью catch(...)
            }
        }
    }
    """

    Динамическую память всегда нужно очищать, даже(тем более)
    при сбоях!!!

    Немного о деструкторе:
    Тут нам тоже придется освобождать выделенную динамическую память.
    """
        ~Array() {
            delete [] data;
        }
    """

    Мы свято верим в то, что операции освобождения памяти работают
    безсбойно! И естесственно сами пишем такие операции --
    как деструктор выше.

    Если мы считаем, что какие-то действия происходящие в деструкторе
    могут кинуть исключение -- то, мы обязаны не выпустить исключение
    из деструктора!!! (try catch --- в руки)


    Если у нас есть конструктор:
    """
    Array(size_t sz)
    : size(sz)
    , data(new T[size])
    , dummy(0) {
    }
    """

    Проблема в том, что если dummy(0) упадет, то автоматически вызовутся
    деструкторы для сначала data, потом size...
    Но беда в том, что динамическую память мы не освободим, так как вызовется
    деструктор для указателя, а для значения по указателю нет. Поэтому либо
    надо использовать умные указатели, либо не использовать подобные
    конструкции.



    Оператор [].
    """
        T & operator [] (size_t i) {
            // Array<T> * const this;
            return data[i];
        }

        const T & operator [] (size_t i) const {
            // Array<T> const * const this;
            return data[i];
        }
    """

    Это две разные функции, они отличаются по сигнатуре.
    Одна не позволяет изменять элемент, другая позволяет.

    Как будто бы неявно в функции долетает параметр this --
    указатель на сам объект.
    Соответственно для константного метода:
    """
        Array<T> const * const this;
    """
    А для не константного:
    """
        Array<T> * const this;
    """

    ? Как компилятор их выбирает ?
    * сначала пробует вызвать не константную функцию
    * если не получилось -- вызывает константную


    Есть канонический способ писать оператор =
    """
    // Наивная версия
    Array & operator = (const Array & rhs) {
        size = rhs.size;
        delete [] data;
        data = new T[size];
        // ...
    }
    """

    Этот код плох потому что может быть присваевание самому себе.
    В таком случае мы сначала удалим данные, а потом попробуем
    копировать уже удаленные данные?

    """
    // Менее наивная версия
    Array & operator = (const Array & rhs) {
        if (&rhs == this) { // Именно поэтому не стоит перегружать &
            return *this;
        }
        size = rhs.size;
        delete [] data;
        data = new T[size];
        // ...
    }
    """

    Но хорошо бы не дублировать код, а воспользоваться тем, что уже
    написано.
    """
    void swap(Array & rhs) {
        std::swap(size, rhs.size);
        std::swap(data, rhs.data);
    }

    // Канонический вариант
    Array & operator = (const Array & rhs) {
        Array temp(rhs);
        swap(temp); // Пользуем свой swap
    } // Вызывается деструктор для temp
    // Старые данные -- "Давай до свидания!" (c)
    """

    Исключения могут полезть в "Array temp(rsh);"
    Но это не страшно, так как наш объект не поменяется
    при этом.

    note: Понятно, что надо убрать константность.


    Стоит также реализовать итераторы...
    """
        typedef T value_type;
        typedef T * iterator;
        typedef T const * const_iterator;

        const_iterator begin() const {
            return data;
        }

        const_iterator end() const {
            return data + size;
        }

        iterator begin() {
            return data;
        }

        iterator end() {
            return data + size;
        }
    """
