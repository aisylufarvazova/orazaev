date(10.10.12)
*** Сегодня мы будем изучать классы

    "Классы будем изучать с примера на котором все
    изучают классы -- это комплексные числа" (c)

    -- мини тех перерыв на настройку мониторов --
    -- Прошло 5 минут настроить не смогли и забили --

    Мы хотим с вами написать класс -- это такой пользовательский
    тип данных, или совокупность методов и полей. Он реализует
    интерфейс для последующего использования объектов этого типа.

    
    """
        class badComplex {
            public:
            double x, y;
        };
        // На этом можно было бы остановиться
        
        int main() {
            badComplex z;
            z.x = 1;
            z.y = -2;
            
            badComplex w;
            // Но мы не умеем
            // z + w;
            // std::cout << z;
            // z * 3

            // Кстати присваивать он умеет
            w = z;
            std::cout << w.x << " " << w.y << std::endl;

            // Могли бы написать еще вот так
            badComplex q = z;
            // Тут сработает конструктор копирования.
            // То есть эквивалентная запись
            // badComplex q(z);
        }
    """
    Когда мы пишем присваивание, для нас генерируется дефолтный
    оператор присваивания, который присваивает каждому полю
    w соответствующее поле из z.
    
    
    Попробуем написать несколько иначе...
    """
        class Complex {
        public:
            Complex(double a, double b) {
                std::cout << "Complex(a, b)" << std::endl;
                // Если здесь вывести x и y, то они не будут равны a и b
                x = a; // Здесь происходит присваивание, а не инициализация
                y = b;
                // Но хотелось бы тоже видеть инициализацию
            }

            // Напишем свой конструктор копирования
            Complex(const Complex& other) {
                std::cout << "Complex(other)" << std::endl;
                x = other.x;
                y = other.y;
            }
            double x, y;
        };

        int main() {
            // Теперь можно вот так!
            Complex z(1, -2);
        }
    """

    Конструктор копирования является таковым, если принимает значение
    определяемого класса...(константное, не константное, по ссылке, не по ссылке...)


    Еще немного изменим наш класс.
    """
        class Complex {
        public:
            double x, y;
            // Заменим присваивание на инициализацию
            Complex(double a, double b)
                : x(a), y(b) // КОНСТРУИРОВАНИЕ В ПОРЯДКЕ ИНИЦИАЛИЗАЦИИ!!!
            {
                std::cout << "Complex(a, b)" << std::endl;
            }

            // Делаем то же самое.
            Complex(const Complex& other)
                : x(other.x), y(other.y) 
            {
                std::cout << "Complex(other)" << std::endl;
            }
        };
    """
    
    Важно понять, что если мы не предоставили конструктор копирования, или
    конструктор(). То компилятор предоставит нам их по умолчанию.
    
    Если нам не нужно какое-то особое поведение от конструкторов копирования и
    по умолчанию, то не стоит их писать.
    
    Например, с умными указателями нужен нетривиальный конструктор копирования.
    В большинстве задач стоит задуматься -- если не нужен, то не стоит писать.


    Теперь о времени жизни объектов: они уничтожаются в момент когда они
    дойдут до } в блоке, в котором они были объявлены. 
    Когда стоит удалить объект для него вызывается деструктор.

    Конструктор -- выполняет работу по инициализации, он может бросить исключение
    если не удается создать объект. Совершенно нормально когда он заканчивается
    сбоем.
    
    Деструктор -- возвращает ресурсы системе. Деструктор должен быть всегда безопасен
    так как запрашивать ресурс -- это опасно, а вернуть -- безопасно.

    Что нибудь может пойти не так, но дать уйти исключению за пределы деструктора 
    ужасно плохо. Такого не должно быть никогда!

    Напишем деструктор:
    """
        class Complex {
        public:
            double x, y;
            Complex(double a, double b)
                : x(a), y(b)
            {
                std::cout << "Complex(a, b)" << std::endl;
            }

            Complex(const Complex& other)
                : x(other.x), y(other.y) 
            {
                std::cout << "Complex(other)" << std::endl;
            }
            
            // Знакомтесь -- деструктор.
            ~Complex() {
                std::cout << "Destructor was called!" << std::endl;
            }
        };
    
        int main() {
            Complex w(1, 5);
            // Можно вызвать деструктор руками;
            w.~Complex();

            // Приготовились...
        }// Oops! Мы вызываем деструктор еще раз
        // Это undefined behaviour! Не надо так делать.
        // Но существуют нужды для вызова деструктора руками
        // Об этом в следующем семестре
    """

    ? УУууааааээээ... Зачем нужен деструктор?
    - Пример с файлами
    """
        // Раньше с файлами работали так
        FILE * f;
        f = fopen("file.txt", "r");
        if (f == NULL) {
            // Произошел сбой -- файл не удалось открыть.
            // do something
            // Если бы мы писали класс, то тут бы кинули исключение
        }

        fscanf(f, ...);

        // А эта часть ушла бы в деструктор
        // Мы возвращаем файловый дескриптор обратно системе.
        fclose(f);
    """

    Вернемся к комплексным числам. Иногда стоит просто загнать один из
    кусков программы в отдельный блок.
    """
        int main() {
            Complex z(1, -2);
        
            {
                Complex w;
                w = z;
                std::cout << w.x << " " << w.y << std::endl;
            } // Деструктор w будет вызван вот здесь.
            // Его блок закончился.
            // Кстати w уже тоже будет убрана из местного пространства имен
            // Уже здесь мы не сможем обратиться к w.
            std::cout << "Finish!" << std::endl;
        }
    """

    Кстати можно и вот так
    """
        int main() {
            Complex z(1, -2);
            {
                Complex z(10, 10);
                std::cout << z.x << std::endl;
                // Выведет 10
                std::cout << ::z.x << std::endl;
                // Выведет 1
            }

        }

    """

    Напишем оператор для сложения двух комплексных чисел.
    """
        class Complex {
        public:
            double x, y;
            Complex(double a, double b)
                : x(a), y(b)
            {
                std::cout << "Complex(a, b)" << std::endl;
            }

            Complex(const Complex& other)
                : x(other.x), y(other.y) 
            {
                std::cout << "Complex(other)" << std::endl;
            }

            // Добавим небольшую функцию
            double Re() const {
                return x;
            }

            Complex operator + (const Complex& z) const {
                return Complex(x + z.x, y + z.y);
            }
            
            ~Complex() {
                std::cout << "Destructor was called!" << std::endl;
            }
        };
    """
    Сама функция operator + не изменяет своих слогаемых, поэтому стоит объявить
    ее константной (поставить const после объявления сигнатуры)

    
    Обычно сначала пишут +=, а операцию + реализуют через нее 
    """
        class Complex {
        public:
            double x, y;
            Complex(double a, double b)
                : x(a), y(b)
            {
                std::cout << "Complex(a, b)" << std::endl;
            }

            Complex(const Complex& other)
                : x(other.x), y(other.y) 
            {
                std::cout << "Complex(other)" << std::endl;
            }

            Complex& operator += (const Complex& z) {
                x += z.x;
                y += z.y;
                return *this;
            }

            Complex operator + (const Complex& z) const {
                Complex result(*this);
                return result += z;
            }
            
            ~Complex() {
                std::cout << "Destructor was called!" << std::endl;
            }
        };
    """

    Как перегрузить префиксный и постфиксный ++
    """
        class Complex {
        public:
            double x, y;
            Complex(double a, double b)
                : x(a), y(b)
            {
                std::cout << "Complex(a, b)" << std::endl;
            }

            Complex(const Complex& other)
                : x(other.x), y(other.y) 
            {
                std::cout << "Complex(other)" << std::endl;
            }

            Complex& operator += (const Complex& z) {
                x += z.x;
                y += z.y;
                return *this;
            }

            Complex operator + (const Complex& z) const {
                Complex result(*this);
                return result += z;
            }

            // Префиксный! ++C
            Complex& operator++() {
                ++x;
                return *this;
            }
            
            // Постфиксный! С++;
            Complex operator++(int) {
                Complex old(*this);
                ++x;
                return old;
            }
            
            ~Complex() {
                std::cout << "Destructor was called!" << std::endl;
            }
        };
    """

    Напишем вывод на экран.
    """
        std::ostream& operator<< (std::ostream & out, const Complex & z) {
            out << z.x << " + " << z.y << "i";
            return out;
        }
    """
