    prefix and postfix ++       // prepostfix.cpp
    i = 10
    k = ++i // k = 11; i = 11

    i = 10
    k = i++ // k = 10; i = 11



    unary + for integer
    '+5', '+i'

    what about '++++k' or '++k++'   // preprefix.cpp and priority.cpp
    PRIORITY:
    "Постфиксные операторы всегда выполняются раньше"

    Примеры постфиксных операторов:
    [], (), ++, ->, ., ::, ->*, .*



    lvalue and rvalue
    example: a = b
    lvalue is a, rvalue is b
    Например a не может быть константой(5) или константной(const a) переменной

    Любое lvalue это нечто, что имеет адрес в памяти и нечто изменяемое. // Фактически определение


    Problem:
    ++i = 5;
    SOLVE:
    (++i) = 5; // приоритет равно имеет низкий оператор (ну вы понели %)) lvalue.cpp


    operator= возвращает lvalue (возвращает ссылку)

    О бинарных операторах
    *, /, -, +, %

    Оператор / зависит от аргументов: оба целочисленные или double



    О размере типов:
    char -- самый маленький по стандарту
    Все остальные считаются относительно чара
    Естесственно зависит от платформы
    В 99% случаев char -- это 1 байт

    размер char <= short int <= int <= long int <= long long int
    можно опускать int (short a; long b; long long c;)

    Чтобы небыло зависимости от платформы макросами определяют свои типы
    вроде i8(int 8 bit) i16(int 16 bit)

    Получить размер можно с помощью sizeof()

    Числа храняться в виде битов, соответственно привет бинарным операциям:
    Побитовое и &
    Побитовое или |
    Побитовое исключающее или xor
    Побитовые сдвиги >> <<

    Знаковый бит сохраняется.

    Как оно хранится в памяти когда оно отрицательно:
    Есть k битов для хранения целого (2^k значений 0.. 2^k-1)
    Если бит беззнаковый то храним от 0 до k-1 бита

    Если знаковый
    от -2^(k - 1) .. 2^(k - 1) - 1

    Делится ли число на 2
    a % 2 == 0
    a & 1 == 0

    немного об операторе if:
    1 == True
    2 == False



    О скорости между i++ или ++i:
    Когда i это интегральная обычная переменная скорости мы не заметим
    потому что компилятор их оптимизирует

    Если i это например какой-нибудь итератор обходящий какой-нибудь контейнер
    то скорее всего компилятор не поймет что тут оптимизировать.
    Поэтому совет от классиков: старайтесь вообще везде писать (++i) там где это
    не помешает выразительности кода

    "Правильней было бы назвать язык не С++, а ++С" (c) учител


    Логические операторы:
    ==, !=, &&, ||, >=, >, <=, <

    Приоритет операторов сравнения выше чем
    && и ||


    Иногда вместо if можно использовать оператор ? : (один из немногих, которое нельзя перегружать)
    logical_expression ? if ture here : if false here;

    Вопрос в том, что такое операции? Есть такое понятие как "выражение"

    выражением не является условный оператор if, while, return и так далее (скорее инструкции, чем выражение)

    Есть такой оператор , (Имеет самый нижний приоритет) бинарный он последовательно вычисляет сначала
    левую часть потом правую часть. И вернет правую часть в итоге.
    a, b // сначала a, потом b в итоге вернется b

    хитрости:
    x > y ? (a, b, c) : d // c и d должны быть одинакового типа

    Где мы будем перегружать оператора , (класс в котором хранится многочлен)
    , будет вычислять НОД например: (f, b, d)



    Если есть какой-то бинарный оператор @, то можно сделать оператор @=
    который будет обозначать:
    a @= b == a = a @ b

    Считается, что обычно a @= b быстрее чем a = a @ b потому-что не нужно выделять дополнительной памяти для
    хранения результата(например сложение матриц).

    Обычная практика сначала написать a @= b, а потом a = a @ b через него. Иногда так делать не стоит
    (например в перемножении матриц так делать не стоит)

    На этом про операторы на сегодня нам сказано все что было желаемо сказать.




    Немного про инструкции.

    if ( expr ) {
    do
    } else {
    do
    }

    for (expr1; expr2; expr3) { // do until expr2 is true
        do
    }

    while(expr) {   // do while expr is true
        do
    }

    do {    // do minimum 1 time, and after 1 time do while true

    } while(expr)



    goto // перейти к метке
    label: // метка для goto
    goto -- плохо

    Иногда оправдано использование goto
    например для выхода из циклов вложенности > 1
    А иногда в случае того, когда нужно генерировать код.


    Много вариантов бесконечного цикла
    for(;;) {
    }
    while (1) {
    }
    do {
    } while(1)
    label:
    goto label


    Об операторе switch

    switch( simple_expr ) {// simple expr is integer or bool
        case 0:

        break;
        case 1:

        // ...
        case 42

        default:

    };

    case-ы это набор меток, поэтому нужно их прирывать инструкцией break;
    continue использовать нельзя
    После case должно стоять значение вычисляемое на момент компиляции(константа)
    switch работает только для интегральных типов


    Учител больше любит
    if ( expr )
        block
    else if (expr)
        block
    else if (expr)
        block
    else
        block

    правда компилятор visual c++ генерировал неправильный код, когда таких if было больше чем 128




    Указатели и массивы

    int * p = 0;
    int k = 23;

    p = &k; // *p == 23

    *p = 13; // k == 13 && *p == 13


    Массив на пальцах -- непрерывный кусок памяти в котором лежат одинаковые объекты
    чтобы работать с массивом нужно знать его начало(указатель на начало) поэтому указатели
    очень хорошо дружат с массивами


    setBit(int * data, int pos, int value) {
        //изменть в данных бит c позицией pos на значение value
    }



    Стандартный алгоритм сортировки:
    #include<algorithm>
    #include<vector>
    std::vector<int> k;
    //
    std::sort(k.begin(), k.end()); // Будет сравнивать с помощью стандартного оператора <

    Если мы хотим отсортировать как-то по другому, то нужно написать пользовательскую функцию
    сортировки и передать в sort 3-им необязательным аргументом

    bool f(int a, int b) {
        return a > b;
    }

    std::sort(k.begin(), k.end(), f);

    Еще в конце был рассказ про устройство Даффа(добро пожаловать на википедию)
